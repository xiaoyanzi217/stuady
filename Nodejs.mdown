# 加载模块

- 加载模块
- 创建模块
- 使用 node_modules 文件夹

## 理解 Node 如何加载模块

在 Node 中既可以用文件路径也可以用名称来引用模块，除非是核心模块，否则用名称引用的模块最终都会被映射为一个文件路径。 Node 核心模块将一些核心函数暴露给程序员，他们在 Node 进程启用时会被预先载入。

     var module = require('module_name');

上面的代码会导入一个核心模块或者由NPM安装的模块，require 函数会返回一个对象，该对象表示模块对象对外暴露的 JavaScript API。

## 导出模块

1.  在 Node 中 CommonJS模块系统是文件之间共享对象的或函数的唯一方式。文件的模块是一一对应的。

        function Circle(x,y,z){

            function Z_squared(){

               return Math.pow(z,2);}

            function area(){

               return Math.PI * Z_squared()}

            return {

               area:area};}

            module.exports = Circle;

         module是一个变量，他表示当前模块自身。而 module.exports 表示模块向需要它的脚本所导出的对象，它可以是任意对象。

2.  导出复杂对象：module.exports被初始化为一个空对象，可以为这个空对象附加上任意想导出的对象。 如，可以设计模块，让其导出一组函数。

        function printA(){

           console.log('A')；}

        function printB(){

           console.log('B');}

        function printC(){

           console.log('C');}

        module.exports.printA = printA;

        module.exports.printB = printB;

        module.exports.pi = Math.PI;

该函数导出两个函数（printA 和 printB）以及一个数字(pi),使用该模块的客户脚本如下所示：

        var myModule2. = require('./myModule2');

          myModule2.printA; //->A

          myModule2.printB; //->B

        console.log(myModule2.pi); //->3.1415926

## 加载模块

### 加载核心模块

核心模块：Node 中的二进制形式发布的模块。只能通过模块名引用，而不能通过文件路径引用。

加载和使用 http 核心模块：

        var http = require('http');

### 加载文件模块

通过提供绝对路径从文件系统中加载非核心模块

        var myModule = require('/home/pedro/my_module/my_module');

也可以提供基于当前文件的相对路径

        var myModule = require('my_module/my_module');

        var myModule = require('./lib/my_module');

 两条语句是等效的

       var myModule = require('./lib/my_module');

       var myModule = require('./lib/my_module.js');

### 加载文件夹模块

使用文件夹路径来加载模块

       var myModule = require('./myModuleDir');

### 从 node_module 文件夹加载

如果一个模块既不是相对路径也不是核心路径，那么 Node 会尝试在当前目录下的 Node_modules 文件夹中查找该代码。

       var myModule = require('./myMmodule.js');

### 缓存模块

模块首次加载会被缓存起来

       console,log('module my_module initiakizing……');

       module.exports = function () {

       console.log('Hi!');}

       console.log('my_module initiakized.');

然后使用如下代码的脚本加载一次上述模块：

       var myModuleInstance1 = require('./my_module');

则会输出一下信息

       module my_module initiakizing……

       module my_module initiakized.

如果两次加载还模块，

       var myModuleInstance1 = require('./my_module');

       var myModuleInstance12= require('./my_module');

输出信息并没有发生变化

       module my_module initiakizing……

       module my_module initiakized.

# 应用缓冲区处理、编码和解码二进制数据

- 理解 Node 中为何需要缓冲区

- 用字符串创建缓冲区

- 用缓冲区转换成字符串

- 在缓冲区中处理数据

- 切分和复制缓冲区

## 创建缓冲区

 1. 可以使用 UTF——8 编码格式的字符串来创建缓冲区，示例代码如下：

	    var buf = new Buffer('Hello world');

2. 只要指定编码格式作为构造函数的第二个参数，也可以用其他编码格式的字符串创建缓冲区：

       var buf = new Buffer('8bsfs32','saf324');

3. 可以被接受的编码格式及他们的标识符如下：

  - ascii -- ASCII

  - utf8 -- UTF8

  - base64 -- Base64

> 如果缓冲区没有用具体内容初始化，则可以通过指定容量大小来创建缓冲区，以备将来容纳数据。可以通过指定长度创建新的缓冲区，如下所示：

>       var Buf = new Buffer(1024);//创建长度为1024的缓冲区

## 在缓冲区中获取和设置数据

在创建或是获取缓冲区后，你也许想要查看或是修改其内容，可以使用 [] 操作符来访问缓冲区的某个字节，例如：

       var buf = new Buffer("my buffer content");

       // 访问Buf缓冲区的第10个字节

      console.log(buf[10]);

**注意：当创建一个已被初始化的缓存区时，请记住该缓存区中包含的数据并非是0，而是一些随机值**

       var buf = new Buffer (1024);

       console.log(buf[100]);

> 同样也可以处理任意位置上的数据：

>      buf[99] = 125; //将第100个位置上的数据设置为125

**注意：在某些情况下，一些缓冲区操作并不产生错误，如：**
 - 如果缓存区中的某个位置设置为一个大于255的数，那么将会用256对该数取模，最终将取模结果赋值给该位置。

 - 如果将缓冲区的某个位置设置为256，那么该位置实际上是被赋值为0。

 - 如果将缓冲区的某个位置设置为1999.4这样的小数，那么该位置仅会存储整数部分。

 - 如果尝试给超出缓冲区边界的位置赋值，那么赋值操作将以失败告终，缓冲区也不会发生变化。

1. 还可以通过查询缓冲区的 length 属性来获取缓冲区的长度，如：

                  var buf = new Buffer(100);
                  console.log(buf.length);

2. 还可以使用缓冲区的长度迭代缓冲区的内容，来设置或获取每个字节：

              var buf = new Buffer(100);
                  for (i=0;i<buf.length;i++){
                  buf[i] = i;
              }

       新建一个大小为100的缓冲区，并从1~99依次设置缓冲区每个字节。

## 切分缓冲区

一旦创建或获取一个缓冲区，也许需要将此缓冲区的一部分提取出来，可以指定起始位置和结束位置来切分缓冲区，从而创建一个更小的缓冲区。

          var buf = new Buffer("I love my family");
          var smallBuffer = buffer.slice(2,9);
          console.log(smallBuffer.toString()); // -> love my

**注意：在切分缓冲区的时候，并没有分配新的内存，也没有进行任何复制，新缓冲区还是使用父缓冲区的内存区域，只不过引用了父缓冲区不同的起始位置和结束位置。它会存在内存泄露问题。**

## 复制缓冲区

应用 copy 方法,将缓冲区的一部分复制到另一个缓冲区中：

      var buf1 = new Buffer("I love my family");
      var buf2 = new Buffer(11);
      var targetStart = 0;
      var socurceStart = 7;
      var socurceEnd = 16;
      buf1.copy(buf2,targetStart,socurceStart,socurceEnd);
      console.log(buf2.toString()); // -> my family

*使用 copy 方法可以很好的解决内存泄露问题*

## 缓冲区的解码

1. 缓冲区可以转换为 utf-8 编码格式的字符串，如：
        var str = buf.toString()
2. 缓冲区可以转换成其他指定编码格式的字符串，如：
        var b64Str =buf.toString("base64"); // 转成 base64 编码格式的字符串
3. 使用 toString 方法，将 utf8 编码格式的字符串转成 base64 编码格式的字符串，如：
        var utf8String ='my tring';
        var buf = new Buffer(utf8String);
        var base64String = buf.toString('base64');

# 使用事件发射器模式简化事件绑定

- 事件发射器模式简介

- 绑定和解绑定事件监听器

- 创建自定义的事件发射器

在 node 中，很多对象都能够发射事件，例如，每当有新客户端连接时，TCP 服务器就会发射 “connect” 事件，又比如每读取一整块数据，文件流就会发射 “data” 事件，这些对象在 Node 中被称为事件发射器，他可让程序员订阅感兴趣的事件，并将回调函数绑定到相关的事件上，每当事件发射器发射事件时，对应的回调函数就会被调用。

## 理解标准回调模式

1. 异步编程并不使用函数返回值表示函数调用的结果，而是采用后继传递风格取而代之。

> 后继传递风格是一种程序的流程控制权以后继的形式被显示传递编程的风格。后继实际上是一个函数，当 CPS 函数计算出返回值，它就会调用后继函数，并将 CPS 函数的返回值作为其参数。

2. 在后继传递风格中，每个函数在执行完毕后都会调用一个回调函数，以使程序能够继续运行下去。

        var fs = require('fs');
        fs.readFile('/ect/passwd',function(err,fileContent){
           if (err) {
               throw err;
           }
         console.log('fileContent',fileContent.toString());
        });

        本例中，将一个内联匿名函数传递给 fs.readFile 函数。作为其第二个函数，其实这就是在使用 CPS ，因为这个内联匿名函数内将函数执行继续下去了。

## 理解事件发射器模型

事件发射器就是就是可以发射事件的对象，而事件监听器则是绑定到事件发射器上的代码，负责监听特定类型的事件。

          var req = http.require(option,function(require){
              require.on("data",function(data){
                  console.log("some data from the require",data);
              });
              response.on("end",function(){
                  console.log("response ended");
              });
          });
          req.end();

**Node 的 http.require API （后面将介绍）创建了一个 HTTP 请求，并将其发送到远程服务器。第一行用到了后继传递风格，传递了一个当 HTTP 服务器相应时就会被调用的内联函数。HTTP 请求API再此处应用 CPS 是因为 http.require 函数执行完毕之后，程序还要继续运行下去**


## 理解事件类型

虽然事件发射器是服务任意类型事件的通用接口，但在 Node 的实现中只有一个特例  ，即 “error” 事件。Node中的大多数事件发射器实现在程序发生错误时都会发射 “error ”事件。如果程序员选择不监听 “error” 事件，则当 error 事件发生时，事件发射器会注意到它，并向上抛出一个未捕获的异常。

## 应用事件发射器 API

任何实现了事件发射器模型的对象（比如 TCP 套接字、HTTP 请求）都实现了如下所示的一组方法：

- addLinstener 和 .on -----为指定类型的事件添加事件监听器

- .once ------为指定类型的事件绑定一个仅会被调用一次的事件监听器

- .removeEventListener ------删除绑定到指定事件上的某个指定的事件监听器。

- removeAllEventListener-------删除绑定到指定事件上的所有事件监听器。

### 使用 addLinstener() 和 .on()绑定回调函数

通过指定事件类型和回调函数，就可以注册当事件发生时所要调用的操作。例如，当有可用的数据块时，文件可独流就会发射 “data” 事件。下面的代码展示了如何通过传入一个回调函数来通知发生了 “data” 事件：

        function receiveData(data){
          console.log("got data from file read stream:%j",data);
        }
        readStream.addLinstener("data",receiveData);

还可以用函数 .on来代替 .addLinstener 函数，它只是 .addLinstener 的简写形式，下面这段代码和上面那段代码是等效的：

        function receiveData(data){
          console.log("got data from file read stream: %j",data);
        }

在上面的代码中用一个事先声明的命名函数作为回调函数，当然也可以使用内联匿名函数来替代命名函数以简化代码：

        readStream.on("data",function(data){
          console.log("got data from file read stream:%j",data);
        });

正如前面所指的那样，传递给回调函数的参数取决于特定的事件发射器对象与事件类型，它并没有被标准化， “data” 事件可能会传递数据缓冲区， "error" 事件可能会传递一个错误对象，而流的 “end” 事件则不会向事件监听器传递任何参数。

### 绑定多个事件监听器

事件发射器模式允许多个事件监听器监听同一事件发射器发射的同一类型的事件。例如：

        readStream.on("data",function(data){
          console.log('I hava some data here.');
        })
        readStream.on("data",function(data){
          console.log('I hava some data here too.');
        })

在上面的代码中，readStream 对象的 “data” 类型事件上绑定了两个函数，每当 readStream 对象发射 "data" 事件时，就会看到如下所示的输出信息：

        I hava some data here.
        I hava some data here too.

> 根据事件类型，事件发射器负责按照事件所绑定的监听器的注册顺序依次调用事件监听器，这意味着两件事：
   - 某个事件监听器也许并不会在事件发射之后立即被调用，也许在这之前会有别的事件监听器被调用。
   - 异常被抛出到堆栈并不正常，它通常是由代码中的错误引起的。当事件被发射时如果某个事件监听器在被调用时抛出错误，可能会导致一些事件监听器永远都不会被调用。在这种情况下，事件发射器将会捕捉到错误，也许还会处理它。

### 使用 .removeListener() 从事件发射器中删除一个事件监听器

如果希望当一个对象发射了某个特定事件时不再受到通知时，可以通过指定事件类型和回调函数来取消事件监听器的注册，如下代码：

        function receiveData(data){
          console.log("got data from file read stream:%j",data);
        }
        readStream.on("data",receiveData);
        // ……
        readStream.removeListener("data",receiveData);

在上例中，最后一行把一个可能在将来被随时调用的事件监听器从事件发射器对象中删除。

> 为了删除指定的事件监听器，就必须为回调函数命名，因为回调函数至少要在两处用到——增加和删除事件监听器。

### 使用 .once()使回调函数最多执行一次

如果想监听最多只发生一次的事件，或者只是对某个类型的事件第一次发生时感兴趣，则可以用 .once()函数。
> 该方法增加了一个事件监听器，并在第一个事件发生后删除它。

        function receiveData(data){
        	console.log("got data from file read stream :%j",data);
        }
        readStream.once("data",receiveData);
在上面的代码中，receiveData 函数只被调用一次，如果在 readStream 对象上发射 data 事件，receiveData 回调函数仅会被触发一次。

这是一个方便的方法，因为很容易实现它，如下所示：

        var EventEmitter = require ("events").EventEmitter;
        EventEmitter.prototype.once = function(type,callback){
          var that =this;
          this.on(type,function listener(){
            that.removeListener(type,listener);
              callback.apply(that,arguments);
            })
        }

在上面的代码中重新定义了 EventEmitter.prototype.once 函数，这就等于重新定义了继承自 EventEmitter 所有对象的 once 方法。

### 使用 .removeAllEventListener()从事件发射器删除所有事件监听器

可以从事件发射器中删除所有针对某一指定类型的事件而注册的事件监听器，如下所示：

      emitter.removeAllListener("SIGTREM");

例如，如果想删除进程中断事件的所有事件监听器，可以这样做，如下所示：

      precess.removeAllListener("SIGTREM");

## 创建事件发射器

### 从 node 事件发射器继承

如果有兴趣，在自己的应用自始至终都使用 Node 事件发射器，那么可以创建一个继承自 EventEmitter 伪类，实例代码如下：

      util = require ('util');
      var EventEmitter = require ('events').EventEmitter;
      // here is the MyClass constructor;
      var MyClass = function(){

      }
        util.inherits(MyClass,EventEmitter);
